## Penser à changers les informations indiquées avec les chevrons (les TODO vous indiquerons où)
services:
  # TODO
  scoremanagment_front:
    build : 
      context : ./front
      
    # Ci-dessous la redirection du port à décommenter pour les tests en local
    # ports:
    #   - "8080:8080"

    # links permet d'indiquer que les conteneurs peuvent communiquer sur un réseau interne au moteur Docker
    # ici, le conteneur du "front" doit pouvoir échanger avec le conteneur du "back"
    links:
      # TODO
      - scoremanagment_api # <nom-conteneur-api>

  # TODO
  scoremanagment_api:
    build : 
      context : ./back

    # Ci-dessous la redirection du port à décommenter pour les tests en local
    # ports:
      # - "8000:8000"

    # "depends_on" permet d'indiquer que le conteneur api doit attendre le lancement du conteneur "PostgreSQL" avant de démarrer
    depends_on:
      db:
        condition: service_healthy
    environment:
      # TODO
      # - SPRING_DATASOURCE_URL=jdbc:postgresql://<nom-conteneur-bdd>:5432/<nom-bdd>
      - SPRING_DATASOURCE_URL=jdbc:postgresql://scoremanagment_db:5432/dbscoremanagment
      # TODO
      # - SPRING_DATASOURCE_USERNAME=<nom-utilisateur-bdd>
      - SPRING_DATASOURCE_USERNAME=postgres
      # TODO
      # - SPRING_DATASOURCE_PASSWORD=<mot-de-passe-BDD>
      - SPRING_DATASOURCE_PASSWORD=d1aef2c75cefb6d80e7907ae7a32f133c7a81c00
      # TODO : DDL auto ou pas ?
      #- SPRING_JPA_HIBERNATE_DDL_AUTO=none
      - SPRING_JPA_HIBERNATE_DDL_AUTO=none

  db:
    image: postgres:17.2
    # TODO
    container_name: scoremanagment_db # <nom-conteneur-bdd>
    environment:
      # TODO
      # - POSTGRES_USER=<mot-de-passe-root-bdd>
      - POSTGRES_USER=postgres
      # TODO
      # - POSTGRES_PASSWORD=<mot-de-passe-root-bdd>
      - POSTGRES_PASSWORD=d1aef2c75cefb6d80e7907ae7a32f133c7a81c00
      # TODO
      # - POSTGRES_DB=<nom-bdd>
      - POSTGRES_DB=dbscoremanagment
    logging: # option de paramétrage des logs
      options:
        max-size: 10m # fichier de 10 Mo maximum
        max-file: "3" # jusqu'à 3 fichiers de log
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    # on ne redirige pas le port 5432 par sécurité, la base de données est ainsi inaccessible ailleurs que entre les conteneurs
    # Décommenter ces lignes pour pouvoir rediriger et ainsi pouvoir facilement tester en local
    # ports:
    #   - '5432:5432'
    volumes:
      # TODO ajout des volumes pour création automatique de la base de données à la création du conteneur
      # Attention, un dossier "db" doit être créé et contenir les scripts de création
      - ./db/:/docker-entrypoint-initdb.d/

  # Le service suivant correspond au "reverse proxy"
  # -> le serveur HTTP de type "nginx" agit comme un reverse proxy
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "8080:80"
      - "443:443" # exposition du port 443 (sécurisé)
    volumes:
      # ajout du fichier de configuration du nginx pour en faire un "reverse proxy"
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      # ajout du chemin vers les certificats
      - ./nginx:/etc/nginx/conf.d/ 
    depends_on:
      # - <nom-conteneur-front>
      - scoremanagment_front
      # - <nom-conteneur-api>
      - scoremanagment_api
